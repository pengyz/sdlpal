// clang-format off
/*0x0000*/ X(stop                                   ),
/*0x0001*/ X(stopNext,                              ),
/*0x0002*/ X(stopIf,                                E(target), I(idleFrame)),
/*0x0003*/ X(jumpIf,                                E(target), I(idleFrame)),
/*0x0004*/ X(trigger,                               E(entry), I(objectId)),
/*0x0005*/ X(redrawScreen,                          I(unknown), I(delay), I(updateGestures)),
/*0x0006*/ X(jumpRandom,                            I(min), E(target)),
/*0x0007*/ X(battle,                                I(enemyTeam), I(allowFlee)),
/*0x0008*/ X(setNextReturn                          ),
/*0x0009*/ X(waitFrames,                            I(count), I(isTrigger)),
/*0x000A*/ X(jumpIfDialogRejct,                     E(target)),
/*0x000B*/ X(wakSouth,                              ),
/*0x000C*/ X(walkWest,                              ),
/*0x000D*/ X(walkNorth,                             ),
/*0x000E*/ X(walkEast,                              ),
/*0x000F*/ X(setDirFrame,                           I(direction), I(currFrameNum)),
/*0x0010*/ X(npcWalkTo,                             I(x), I(y), I(z)),
/*0x0011*/ X(npcWalkToSlow,                         I(x), I(y), I(z)),
/*0x0012*/ X(setObjectPositionWithPartyRelative,    I(objectId), I(partyXOffset), I(partyYOffset)),
/*0x0013*/ X(setObjectPositionAbslute,              I(objectId), I(partyXOffset), I(partyYOffset)),
/*0x0014*/ X(setGusture,                            I(currentFrameNum)),
/*0x0015*/ X(setPartyGestureDirection,              I(direction), I(frame), I(partyIndex)),
/*0x0016*/ X(setDirectionGesture,                   I(notZero), I(direction), I(frame)),
/*0x0017*/ X(setPlayerExtraAttribute,               I(equipSlotIndex), I(attributeIndex), I(attributeValue)),
/*0x0018*/ X(equipItem,                             I(equipSlotIndex), I(equipItemId)),
/*0x0019*/ X(changePlayerAttribute,                 I(attributeIndex), I(amount), I(playerIndex)),
/*0x001A*/ X(setPlayerState,                        I(attributeIndex), I(amount), I(playerIndex)),
/*0x001B*/ X(changePlayerHp,                        I(bApplyAll), I(amount)),
/*0x001C*/ X(changePlayerMp,                        I(bApplyAll), I(amount)),
/*0x001D*/ X(changePlayerHpMp,                      I(bApplyAll), I(amount)),
/*0x001E*/ X(changeCash,                            I(amount), E(failureEntry)),
/*0x001F*/ X(addToInventory,                        I(objId), I(num)),
/*0x0020*/ X(removeItemFromInventory,               I(objId), I(num), E(addItemEntry)),
/*0x0021*/ X(inflictDamage,                         I(bApplyAll), I(amount)),
/*0x0022*/ X(revivePlayer,                          I(bApplyAll), I(percent)),
/*0x0023*/ X(removePlayerEquipmment,                I(playerRole), I(bRemoveAll)),
/*0x0024*/ X(setAutoScriptEntry,                    I(bApply), E(scriptEntry)),
/*0x0025*/ X(setTriggerScriptEntry,                 I(bApply), E(scriptEntry)),
/*0x0026*/ X(showBuyItemMenu,                       I(storeNum)),
/*0x0027*/ X(showSellItemMenu,                      I(storeNum)),
/*0x0028*/ X(applyPoisonToEnemy,                    I(bApplyAll), I(poisonId)),
/*0x0029*/ X(applyPoisonToPlayer,                   I(bApplyAll), I(poisonId)),
/*0x002A*/ X(CureEnemyPoisonByObjId,                I(bApplyApp), I(poisonId)),
/*0x002B*/ X(CurePlayerPoisonByObjId,               I(bApplyApp), I(poisonId)),
/*0x002C*/ X(CurePlayerPoisonByLevel,               I(bApply), I(maxLevel)),
/*0x002D*/ X(CurePlayerPoisonByLevel,               I(statusId), I(numRound)),
/*0x002E*/ X(setEnemyStatus,                        I(statusId), I(numRound), E(failedEntry)),
/*0x002F*/ X(removePlayerStatus,                    I(statusId)),
/*0x0030*/ X(increasePlayerStateTemporarilyByPercent, I(statusIndex), I(increasePercent), I(targetObjectId)),
/*0x0031*/ X(changePlayerBattleSpriteTemporarily,   I(spriteIndex)),
/*0x0032*/ U(), // not exist
/*0x0033*/ X(collectEnemyForItems,                  E(failedEntry)),
/*0x0034*/ X(transformCollectedEnemiesIntoItems,    E(failedEntry)),
/*0x0035*/ X(shakeScreen,                           I(shakeTime), I(shakeLevel)),
/*0x0036*/ X(setCurrentPlayingRNGAnimation,         I(animIndex)),
/*0x0037*/ X(playRNGAnimation,                      I(startFrame), I(numFrames), I(speed)),
/*0x0038*/ X(teleportPartyOutOfScene,               E(failedEntry)),
/*0x0039*/ X(drainHpFromEnemy,                      I(amount)),
/*0x003A*/ X(PlayerFleeFromBattle,                  E(failedEntry)),
/*0x003B*/ X(showDialogMiddle,                      I(fontColor), I(unknown), B(playingRNG)),
/*0x003C*/ X(showDialogUpper,                       I(numCharFace), I(fontColor), B(playingRNG)),
/*0x003D*/ X(showDialogLower,                       I(numCharFace), I(fontColor), B(playingRNG)),
/*0x003E*/ X(showWindowTextCenter,                  I(fontColor)),
/*0x003F*/ X(rideObjectToPointLowSpeed,             I(x), I(y), I(z)),
/*0x0040*/ X(setTriggerMethodForEventObject,        I(bApply), I(triggerMode)),
/*0x0041*/ X(markScriptFailed                       ),
/*0x0042*/ X(simulateMagicForPlayer,                I(magicObjectId), I(baseDamage), I(targetIndex)),
/*0x0043*/ X(setBackgroundMusic,                    I(numRIX), I(bLoop), I(fadeTime)),
/*0x0044*/ X(rideObjectToPointNormalSpeed,          I(x), I(y), I(z)),
/*0x0045*/ X(setBattleMusic,                        I(musicId)),
/*0x0046*/ X(setPartyMapPosition,                   I(mapX), I(mapY), I(mapZ)),
/*0x0047*/ X(playSoundEffect,                       I(soundNum)),
/*0x0048*/ U(), // not exist
/*0x0049*/ X(setObjectState,                        I(bApply), I(state)),
/*0x004A*/ X(setCurrentBattleField,                 I(battleFieldNum)),
/*0x004B*/ X(nullifyObjectShort,                    I(vanishTime)),
/*0x004C*/ X(chasePlayer,                           I(maxDistance), I(speed), I(isFloating)),
/*0x004D*/ X(waitForAnyKey                          ),
/*0x004E*/ X(loadLastSavedGame                      ),
/*0x004F*/ X(fadeScreenToRed                        ),
/*0x0050*/ X(screenFadeOut,                         I(fadeTime)),
/*0x0051*/ X(screenFadeIn,                          I(fadeTime)),
/*0x0052*/ X(hideObject,                            I(hideFrames)),
/*0x0053*/ X(changeToDay,                           ),
/*0x0054*/ X(changeToNight,                         ),
/*0x0055*/ X(addMagicToPlayer,                      I(magic), I(playerRole)),
/*0x0056*/ X(removeMagicFromPlayer,                 I(magic), I(playerRole)),
/*0x0057*/ X(setBaseDamageAccordingToMp,            I(magicObjectId), I(mpRate)),
/*0x0058*/ X(jumpIfItemLessThan,                    I(itemId), I(neededCount), E(failedEntry)),
/*0x0059*/ X(loadScene,                             I(sceneNum)),
/*0x005A*/ X(halvePlayerHp,                         ),
/*0x005B*/ X(halveEnemyHp,                          ),
/*0x005C*/ X(hideInBattle,                          I(hidingTime)),
/*0x005D*/ X(jumpIfPlayerHasNoPoisonKind,           I(poisonId), E(failedEntry)),
/*0x005E*/ X(jumpIfEnemyHasNoPoison,                I(poisonId), E(failedEntry)),
/*0x005F*/ X(killPlayerImmediate,                   ),
/*0x0060*/ X(killEnemyImmediate,                    ),
/*0x0061*/ X(jumpIfPlayerNotPoisoned,               I(poisonId), E(failedEntry)),
/*0x0062*/ X(pauseEnemyChasing,                     I(iCycles)),
/*0x0063*/ X(enemyChasingSpeedUp,                   I(iCycles)),
/*0x0064*/ X(jumpIfEnemyHpPercentBiggerThan,        I(percent), E(jumpEntry)),
/*0x0065*/ X(setPlayerSprite,                       I(playerRole), I(scriptNum), I(bApply)),
/*0x0066*/ X(throwWeaponToEnemy,                    I(magicId), I(baseDamageRate)),
/*0x0067*/ X(enemyUseMagic,                         I(magicId), I(magicRate)),
/*0x0068*/ X(jumpIfEnemyTurn,                       E(entry)),
/*0x0069*/ X(enemyEsaape,                           ),
/*0x006A*/ X(stealFromEnemy,                        I(stealRate)),
/*0x006B*/ X(blowAwayEnemies,                       I(blow)),
/*0x006C*/ X(walkNpcOneStep,                        I(objectId), I(deltaX), I(deltaY)),
/*0x006D*/ X(setSceneEnterOutScript,                I(sceneId), E(enterScriptEntry), E(outScriptEntry)),
/*0x006E*/ X(movePlayerToPositionOnStep,            I(deltaX), I(deltaY), I(layer)),
/*0x006F*/ X(syncEventState,                        I(state)),
/*0x0070*/ X(partyWalkToSpeed2,                     I(x), I(y), I(z)),
/*0x0071*/ X(waveScreen,                            I(screenWave), I(waveProgress)),
/*0x0072*/ U(), // not exist
/*0x0073*/ X(fadeScreenToScene,                     I(speed)),
/*0x0074*/ X(jumpIfNotAllPlayersAreFullHp,          E(entry)),
/*0x0075*/ X(setPlayerParty,                        I(playerRole1), I(playerRole2), I(playerRole3)),
/*0x0076*/ X(showFBPPicture,                        I(chunkNum), I(fade)),
/*0x0077*/ X(stopCurrentMusic,                      I(fadeTime)),
/*0x0078*/ U(), // unknown
/*0x0079*/ X(jumpIfPlayerInParty,                   I(targetPlayerRole), E(jumpEntry)),
/*0x007A*/ X(partyWalkToSpeed4,                     I(x), I(y), I(z)),
/*0x007B*/ X(partyWalkToSpeed8,                     I(x), I(y), I(z)),
/*0x007C*/ X(npcWalkToSpeed4,                       I(x), I(y), I(z)),
/*0x007D*/ X(moveObject,                            I(objectId), I(deltaX), I(deltaY)),
/*0x007E*/ X(setObjectLayer,                        I(objectId), I(layer)),
/*0x007F*/ X(moveViewport,                          I(deltaX), I(deltaY), I(moveFrames)),
/*0x0080*/ X(toggleDayNight,                        I(bSkipUpdate)),
/*0x0081*/ X(jumpIfPlayerNotFacingObject,           I(objectId), I(type), E(entry)),
/*0x0082*/ X(npcWalkToSpeed8,                       I(x), I(y), I(z)),
/*0x0083*/ X(jumpIfPlayerNotInObjectZone,           I(objectId), I(distance), E(entry)),
/*0x0084*/ X(placeItem,                             I(objectId), I(state), E(failedEntry)),
/*0x0085*/ X(delayPeriod,                           I(period)),
/*0x0086*/ X(jumpIfItemNotEquiped,                  I(objectId), I(unknown), E(entry)),
/*0x0087*/ X(animateObject,                         I(objectId)),
/*0x0088*/ X(setMagicBaseDamageAccordingToMoney,    I(objectId)),
/*0x0089*/ X(setBattleResult,                       I(result)),
/*0x008A*/ X(enableAutoBattle,                      ),
/*0x008B*/ X(changePalette,                         I(numPalette)),
/*0x008C*/ X(colorFade,                             I(color)),
/*0x008D*/ X(playerLevelUp,                         I(level)),
/*0x008E*/ X(restoreScreen,                         ),
/*0x008F*/ X(halveCash,                             ),
/*0x0090*/ X(setObjectScript,                       I(objectId), E(scriptEntry), I(dataIndex)),
/*0x0091*/ X(jumpIfFirstEnemyNotSameKind,           E(entry)),
/*0x0092*/ X(showMagicCastingAnimation,             I(playerIndex)),
/*0x0093*/ X(fadeScreen,                            I(step)),
/*0x0094*/ X(jumpIfObjectAtSameState,               I(objectId), I(state), E(entry)),
/*0x0095*/ X(jumpIfAtScene,                         I(sceneNum), I(entry)),
/*0x0096*/ X(showEndingAnimation,                   ),
/*0x0097*/ X(rideObjectToPointHigherSpeed,          I(x), I(y), I(z)),
/*0x0098*/ X(setPartyFollower,                      I(playerRole1), I(playerRole2), I(playerRole3)),
/*0x0099*/ X(changeSceneMap,                        I(senceNum), I(mapNum)),
/*0x009A*/ X(setMutipleObjectState,                 I(objectIdBegin), I(objectIdEnd), I(state)),
/*0x009B*/ X(fadeCurrentScene,                      ), /* FIXME: This is obviously wrong */
/*0x009C*/ X(enemyDivision,                         I(maxDivisionCount), E(failedEntry)),
/*0x009D*/ U(), /* not exist */
/*0x009E*/ X(enemySummons,                          I(objectId), I(summonsCount)),
/*0x009F*/ X(enemyTransform,                        I(objectId)),
/*0x00A0*/ X(quitGame),
/*0x00A1*/ X(setAllPartyMembersPositionSame,        ),
/*0x00A2*/ X(scriptJumpRandomly,                    I(maxRange)),
/*0x00A3*/ X(playCDMusic,                           I(numTrack), I(numRIX)),
/*0x00A4*/ X(scrollFBPToScreen,                     I(chunkNum), I(unknown), I(scrollSpeed)),
/*0x00A5*/ X(showFBPPictureWithSpriteEffect,        I(numChunk), I(spriteNum), I(fade)),
/*0x00A6*/ X(backupScreen,                          ),
/*0x00A7*/ X(nop,                                   ),
/*0x00A8*/ X(printDialogText,                       I(index)), /* 0xFFFF */
    // clang-format on